#include <netinet/in.h>#include <arpa/inet.h>#include <thread>#include <string>//#include <sys/types.h>//#include <sys/socket.h>//#include <sys/ioctl.h>//#include <netinet/in.h>//#include <netinet/tcp.h>//#include <arpa/inet.h>//#include <netdb.h>//#include <errno.h>//#include <unistd.h>//#include <fcntl.h>//#include <stdint.h>		// define int8_t ...//#include <signal.h>#include <unistd.h>#include "uLog.h"#include "strUtil.h"#include "udp_connect.h"//用send()函数发送数据的udp客户端程序int test_client(const std::string& msg,const std::string& ip, int port) {    int sd;    struct sockaddr_in svr_addr;    socklen_t addrlen = sizeof(struct sockaddr_in);    if ((sd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {        perror("socket");        exit(EXIT_FAILURE);    } //先调用connect()函数，为套接字指定目的地址/端口    svr_addr.sin_family = AF_INET;    svr_addr.sin_port = htons(port);    svr_addr.sin_addr.s_addr = inet_addr(STR(ip));    connect(sd, (struct sockaddr *) &svr_addr, addrlen);    LIF("ip:%s:%d",STR(ip),port);    uint64_t count = 1;    char buf[BUFSZ+1] = {};    bool bLoop =true;    srand(time(0));    while (bLoop) {        ssize_t len;        std::string sLog;        if("0"==msg) {            printf("ple input: ");            bzero(buf, sizeof(buf));            fgets(buf, BUFSZ, stdin);            sLog.assign(buf,strlen(buf)-1);        }else{            sLog = SUtil::Format("idx:%d/%s",count++,STR(msg));            usleep( (500+random()%500) *1000);        }        if(sLog.empty()){            continue;        }        //len = sendto(sd, STR(sLog),sLog.size(), 0, (struct sockaddr* )&svr_addr, addrlen);        len = send(sd,STR(sLog),sLog.size(),0); // MUST        LIF("send %d/'%s",len,STR(sLog));        if(0==strncmp("exit",buf,4)){            bLoop = false;            continue;        }        memset(buf, 0, BUFSZ);        //len = recvfrom(sd, buf, BUFSZ, 0, (struct sockaddr *) &svr_addr, &addrlen); //ok        len = recv(sd, buf, BUFSZ, 0); //ok        //LIE(len>0,"client: IP:%s:%d, buf:%d/'%s'", inet_ntoa(svr_addr.sin_addr), ntohs(svr_addr.sin_port),len, buf);        LIE(len>0,"recv: buf:%d/'%s'",len, buf);    }    close(sd);    return 0;}int main(int argc, char*args[]){    LIF("%s %d",args[0],argc);    std::string ip;    int port = PORT;    if(argc>3){        int p = atoi(args[3]);        if(p>0 && p!=port){            port = p;        }    }    if(argc>2){        ip = args[2];    }    std::string msg;    if(argc>1){        msg = args[1];    }    test_client(msg,ip,port);    return 0;}